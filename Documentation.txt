So here I will document how I learn PYTHON using the documntation in a very fun way 
What is covered in this are the following:

        Python interpreter

        Python data types

        Control Flow tools

        Data Structures

        Modules

        Input / Output

        Errors and Exceptions

        Classes

        Standard Library

        Virtual Environments and Packages ðŸ—¸






   ----------------------------------------------------------------------------------   VIRTUAL ENVIRONMENTS AND PACKAGES  -------------------------------------------------------------------------------------------------------------

We find sometimes python applications use packages and modules that dont 
come as part of the standard Library

One Python installation may not be able to meet allt his requirements!

Versions may conflict and and so virtual Environments come to our rescue.

Virtual Environments are self contained directory trees' that contain a 
python installation for a particular version of python plus a number of 
packages

think of it as a small complete computer inside your computer where you
 can install various packages and use them without affecting the global 
 installed version 

creating a virtual environment
# python3 -m venv Sample_one

then after creating a virtual environment we activate it through:
Source Name_of_virtual/bin/activate
sample: source    Sample_one/bin/activate

Managing Packages with pip
Nw after creating the VE oyu can install, upgrade, remove packages using 
a program called pip

by default pip installs packages from  the Python Package Index and you 
can install your required package by specifying the package's name sample:
 python -m pip install package_name

 to upgrade an installed version 

 some of the sub commands
 python -m pip install package_name

 python -m pip uninstall package_name

 python -m pip show package_name

 python -m pip list 

 python -m pip freeze - gives the versions of installed packages and you 
 can create a list of them and save it as requirements.txt file and ship
 it with the program to enable swift / smooth installation.
 sample of using freeze to create a req.txt using freeze
 python -m pip freeze > requirements.txt
 cat requirements.txt

 now the user can install all the required packages using the install -r

   ----------------------------------------------------------------------------------   CONTROL FLOW TOOLS  -------------------------------------------------------------------------------------------------------------

if statements
==============

Sample:

y = int(input("Enter the dimension of your shape"))
x = int(input("1.Square 2.Rectangle"))

if x == 1:
    print(f"The area of sqaure is: {y*4}")
elif x==2:
    print(f"The area of Rectangle is {y*y}")
  an if...elif...elif sequence is a substitute for teh switch or case statements in other languages


for statements
==============

  this iterates in any sequence be it (a list or string)in the order that they appear
  words = ["Martin" , 'Go' , 'into' ,'the ','woods']
for w in words:
    print(w,len(w))


# Code that modifies a collection while iterating over the same colection, a copy is created 1st
users = {'Ken': 'active' ,'Martin': 'inactive' ,'Joyce': 'active' ,'Mary': 'inactive' ,'Brenda': 'active' , }

# iterate over the copy 
for user, status in users.copy().items():
        if statuswords = ["Martin" , 'Go' , 'into' ,'the ','woods']
for w in words:
    print(w,len(w))


# Code that modifies a collection while iterating over the same colection, a copy is created 1st
users = {'Ken': 'active' ,'Martin': 'inactive' ,'Joyce': 'active' ,'Mary': 'inactive' ,'Brenda': 'active' , }

# iterate over the copy 
for user, status in users.copy().items():
        if status == 'inactive':
            del users[user]
            print(users)
 == 'inactive':
            del users[user]
            print(users)


The range function 
===================
If need be to iterate over a sequence of numbers range()function comes in, it generates arithmetic progressions
The end point is not included
for i in range(5):
   print(i)

we can iterate over indices by combining the range and len fn 
users = ["Martin" , 'Go' , 'into' ,'the ','woods']
for us in range(len(users)):
     print(us, users[us])
the object retured by the range function behaves as if its a list but it is not!!
this example  shows it better:
sum(range(4)) == 0+1+2+3
6


break / continue / else
=======================
The break statement breaks out of the innermost enclosing foror while loop
In eithe a for /while loop the else is not executes of the loop is terminated by a break


pass statement
==============
this does nothing but is needed when a statement is required syntactically but the program requires  no applications
oftenly used when writng code and you ned thinking sample:
def initlog(*args):
   pass # remember to implement this



match statement
===============
A match statementtakes an expression and compares its value to successive patterns given as one or more blocks only
the 1st pattern that matches gets executed ...more of like the switch in C,Java
sample
def http_error(status):
  match status:
      case 400:
        return "Bad Request"
      case 404:
        return "try again"
      case 418:
        return "not found"
      case _:
      return "Check your nternet"